name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY_FRONTEND: gamezone-frontend
  ECR_REPOSITORY_BACKEND: gamezone-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm install
    
    - name: Build Docker Images
      run: |
        docker build -t gamezone-frontend:test ./frontend
        docker build -t gamezone-backend:test ./backend
    
    - name: Run Tests
      run: echo "Tests would run here"
  
  terraform-plan:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    
    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var="key_name=${{ secrets.AWS_KEY_NAME }}"
  
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    
    - name: Import Existing Resources
      working-directory: ./terraform
      run: |
        # Get AWS account ID and VPC ID for imports
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        DEFAULT_VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text --region ${{ env.AWS_REGION }})
        
        # Import ECR repositories
        terraform import -var="key_name=${{ secrets.AWS_KEY_NAME }}" aws_ecr_repository.frontend gamezone-frontend || true
        terraform import -var="key_name=${{ secrets.AWS_KEY_NAME }}" aws_ecr_repository.backend gamezone-backend || true
        
        # Import IAM resources
        terraform import -var="key_name=${{ secrets.AWS_KEY_NAME }}" aws_iam_role.ec2_ecr_role gamezone-ec2-ecr-role || true
        terraform import -var="key_name=${{ secrets.AWS_KEY_NAME }}" aws_iam_instance_profile.ec2_profile gamezone-ec2-profile || true
        terraform import -var="key_name=${{ secrets.AWS_KEY_NAME }}" aws_iam_role_policy_attachment.ecr_read_only gamezone-ec2-ecr-role/arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly || true
        
        # Import Security Group (get ID first)
        SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=gamezone-sg" "Name=vpc-id,Values=$DEFAULT_VPC_ID" --query "SecurityGroups[0].GroupId" --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
        if [ ! -z "$SG_ID" ] && [ "$SG_ID" != "None" ]; then
          terraform import -var="key_name=${{ secrets.AWS_KEY_NAME }}" aws_security_group.gamezone_sg $SG_ID || true
        fi
      continue-on-error: true
    
    - name: Terraform Apply (Create infrastructure)
      working-directory: ./terraform
      run: terraform apply -auto-approve -var="key_name=${{ secrets.AWS_KEY_NAME }}"
    
    - name: Get ECR Repository URLs
      id: ecr-urls
      working-directory: ./terraform
      run: |
        echo "frontend_repo=$(terraform output -raw ecr_frontend_repository_url)" >> $GITHUB_OUTPUT
        echo "backend_repo=$(terraform output -raw ecr_backend_repository_url)" >> $GITHUB_OUTPUT
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and Push Frontend Image
      env:
        ECR_REPO: ${{ steps.ecr-urls.outputs.frontend_repo }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPO:$IMAGE_TAG ./frontend
        docker push $ECR_REPO:$IMAGE_TAG
        docker tag $ECR_REPO:$IMAGE_TAG $ECR_REPO:latest
        docker push $ECR_REPO:latest
    
    - name: Build and Push Backend Image
      env:
        ECR_REPO: ${{ steps.ecr-urls.outputs.backend_repo }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPO:$IMAGE_TAG ./backend
        docker push $ECR_REPO:$IMAGE_TAG
        docker tag $ECR_REPO:$IMAGE_TAG $ECR_REPO:latest
        docker push $ECR_REPO:latest
    
    - name: Get Application URL
      run: |
        INSTANCE_IP=$(cd terraform && terraform output -raw instance_public_ip)
        echo "=========================================="
        echo "ðŸŽ‰ DEPLOYMENT SUCCESSFUL!"
        echo "=========================================="
        echo "Frontend: http://$INSTANCE_IP"
        echo "Backend API: http://$INSTANCE_IP:5000"
        echo "Health Check: http://$INSTANCE_IP:5000/health"
        echo "=========================================="
